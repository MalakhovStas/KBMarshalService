from typing import Optional, List, Dict, Tuple

from aiogram.dispatcher import FSMContext
from aiogram.types import Message

from debtors.models import Debtor
from utils import utils
from .base_classes import BaseButton, BaseMessage, GoToBack
from ..config import FACE_BOT
from ..utils.states import FSMMainMenuStates


class MessageGetDebtor(BaseMessage):
    def _set_state_or_key(self) -> str:
        return 'FSMMainMenuStates:get_debtor'

    def _set_reply_text(self) -> Optional[str]:
        return FACE_BOT + '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–∂–Ω–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>'

    def _set_next_state(self) -> Optional[str]:
        return 'reset_state'

    def _set_children(self) -> List:
        return [GoToBack(new=False)]

    @staticmethod
    def get_isp_prs(debtor: Debtor) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤"""
        result = ''
        if debtor.isp_prs and isinstance(debtor.isp_prs, dict):
            for num, (key, value) in enumerate(debtor.isp_prs.items(), 1):
                if len(str(debtor.isp_prs)) > 3700:
                    result += f'\n{num}. {key}\n'
                else:
                    result += f'\n<b>{num}. {key}</b>\n'
                for field_name, field_data in value.items():
                    result += f'{field_name}: {field_data}\n'
        return result

    async def _set_answer_logic(
            self, update: Message, state: Optional[FSMContext] = None) -> Tuple:
        reply_text = self.reply_text
        debtor = None
        if search_query := update.text:
            search_query = search_query.strip().lower()
            surname, name, patronymic = utils.get_fullname(search_query)
            if surname and name and patronymic:
                debtor = await Debtor.objects.filter(
                    surname=surname, name=name, patronymic=patronymic).afirst()
            elif surname and name:
                debtor = await Debtor.objects.filter(surname=surname, name=name).afirst()
            elif surname:
                debtor = await Debtor.objects.filter(surname=surname).afirst()
            elif passport := utils.get_passport(search_query):
                debtor = await Debtor.objects.filter(ser_num_pass=passport).afirst()
            elif inn := utils.get_inn(search_query):
                debtor = await Debtor.objects.filter(inn=inn).afirst()
            elif id_credit := utils.get_id_credit(search_query):
                debtor = await Debtor.objects.filter(id_credit=id_credit).afirst()

            if debtor:
                isp_prs = self.get_isp_prs(debtor=debtor)
                reply_text = f"<b>{FACE_BOT}–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–ª–∂–Ω–∏–∫–µ:</b>\n\n"
                reply_text += f"<b>Id –∫—Ä–µ–¥–∏—Ç:</b> {debtor.id_credit}\n" if debtor.id_credit else ""
                reply_text += f"<b>–§–∞–º–∏–ª–∏—è:</b> {debtor.surname}\n"
                reply_text += f"<b>–ò–º—è:</b> {debtor.name}\n"
                reply_text += f"<b>–û—Ç—á–µ—Å—Ç–≤–æ:</b> {debtor.patronymic}\n" if debtor.patronymic else ""
                reply_text += f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {debtor.date_birth.strftime('%d.%m.%Y')}\n" if debtor.date_birth else ""
                reply_text += f"<b>–ò–ù–ù:</b> {debtor.inn}\n" if debtor.inn else ""
                reply_text += f"<b>–°–µ—Ä–∏—è –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> {debtor.ser_num_pass}\n"
                reply_text += f"<b>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞:</b> {debtor.date_issue_pass.strftime('%d.%m.%Y')}\n" if debtor.date_issue_pass else ""
                reply_text += f"<b>–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç:</b> {debtor.name_org_pass}\n" if debtor.name_org_pass else ""
                reply_text += f"\n<b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ:</b>{isp_prs}" if isp_prs else ""

            self.children_buttons = []
        return reply_text, self.next_state


class GetDebtors(BaseButton):
    """–ö–ª–∞—Å—Å –æ–ø–∏—Å—ã–≤–∞—é—â–∏–π –∫–Ω–æ–ø–∫—É - –î–æ–ª–∂–Ω–∏–∫–∏"""

    def _set_name(self) -> str:
        return 'üí∞ \t –î–æ–ª–∂–Ω–∏–∫–∏'

    def _set_reply_text(self) -> str:
        return f"{FACE_BOT} –î–ª—è –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ\n<b>–§–ò–û | –ò–ù–ù | –ü–∞—Å–ø–æ—Ä—Ç | Id –∫—Ä–µ–¥–∏—Ç</b>"

    def _set_next_state(self) -> Optional[str]:
        return FSMMainMenuStates.get_debtor

    def _set_messages(self) -> Dict:
        messages = [MessageGetDebtor(parent_name=self.class_name)]
        return {message.state_or_key: message for message in messages}
