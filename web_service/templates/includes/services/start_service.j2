<div style="margin-top: 100px">
  <script>
    function clickStopBtn(){
        localStorage.setItem('FileVerifyDisabled{{ service }}', 'false');
        localStorage.setItem('CheckBoxSendMail{{ service }}', 'false');
        localStorage.setItem('CheckBoxSendTelegram{{ service }}', 'false');
        localStorage.setItem('StartServiceForm{{ service }}', 'false')
        {#localStorage.clear()#это использовать нельзя очищает все данные#}
        {#location.reload()#}
      }
  </script>

  {% if task_start_service %}
    <div class='progress-wrapper' xmlns="http://www.w3.org/1999/html">
      <div id="progress-bar-start-service_title" style="margin-bottom: 15px; font-weight: bold"></div>
      <div id='progress-bar-start-service' class='progress-bar' style="background-color: #68a9ef; width: 0%;">&nbsp;</div>
    </div>

    <div id="progress-bar-start-service-message" style="margin-top: 15px">{{ _('Start progress') }}</div>
    <script src="{{ static("celery_progress/celery_progress.js") }}"></script>

    <div class="start-service-result" id="start-service-result"></div>
    <div class="start-service-result-forms">
      <form class="form-input__wrapper form-input__wrapper-start-service-result" method="post" id="start_service_download_result_file_form">
        {% csrf_token %}
        <label for="start_service_download_result_file"></label>
        <input type="text" value="DOWNLOAD_RESULT_FILE:DOWNLOAD_RESULT_FILE:{{ filename }}" id="start_service_download_result_file" name="command" hidden="hidden">
        <button style="display: none" class="btn btn_success btn_success__form-check btn_success__start-service-result" id="start_service_download_result_file_button" onclick="clickDownloadResultBtn()">{{ _('Download results file') }}</button>
      </form>

      <form class="form-input__wrapper form-input__wrapper-start-service-result" method="post" id="start_service_download_service_and_requests_errors_file_form">
        {% csrf_token %}
        <label for="start_service_download_service_and_requests_errors_file"></label>
        <input type="text" value="DOWNLOAD_service_and_requests_errors_FILE:DOWNLOAD_service_and_requests_errors_FILE:{{ filename }}" id="start_service_download_service_and_requests_errors_file" name="command" hidden="hidden">
        <button style="display: none" class="btn btn_success btn_success__form-check btn_success__start-service-result" id="start_service_download_service_and_requests_errors_file_button" onclick="clickDownloadResultBtn()">{{ _('Service and request errors') }}</button>
      </form>

      <form class="form-input__wrapper form-input__wrapper-start-service-result" method="post" id="start_service_download_incorrect_data_or_duplicates_file_form">
        {% csrf_token %}
        <label for="start_service_download_incorrect_data_or_duplicates_file"></label>
        <input type="text" value="DOWNLOAD_incorrect_data_or_duplicates_FILE:DOWNLOAD_incorrect_data_or_duplicates_FILE:{{ filename }}" id="start_service_download_incorrect_data_or_duplicates_file" name="command" hidden="hidden">
        <button style="display: none" class="btn btn_success btn_success__form-check btn_success__start-service-result" id="start_service_download_incorrect_data_or_duplicates_file_button" onclick="clickDownloadResultBtn()">{{ _('Incorrect data or duplicates') }}</button>
      </form>

      <form class="form-input__wrapper form-input__wrapper-start-service-result" method="post" id="command_stop_all_form">
        {% csrf_token %}
        <label for="command_stop_all"></label>
        <input type="text" value="STOP_TASK:ALL:{{ filename }}" id="command_stop_all" name="command" hidden="hidden">
        <button class="btn btn_success btn_success__form-check btn_success__start-service-result" id="stop_all" onclick="clickStopBtn()">{{ _('Stop') }}</button>
      </form>
    </div>

    <script>
      // vanilla JS version
        let task_start_service_state = "{{ task_start_service.state }}";
        const stop_button = document.getElementById('stop_all')
        const start_service_result_elem = document.getElementById("start-service-result");
        const download_resultBtn = document.getElementById("start_service_download_result_file_button");
        const download_service_and_requests_errorsBtn = document.getElementById("start_service_download_service_and_requests_errors_file_button");
        const download_incorrect_data_or_duplicatesBtn = document.getElementById("start_service_download_incorrect_data_or_duplicates_file_button");


        function StartServiceProgress(progressBarElement, progressBarMessageElement, progress) {
            if (progress.title){document.getElementById("progress-bar-start-service_title").innerHTML = progress.title}
            progressBarElement.innerHTML = '&nbsp;';
            progressBarElement.style.maxWidth = '100%';
            progressBarElement.style.width = progress.percent + '%';
            progressBarElement.style.backgroundColor = '#003dff';
            if (progress.description) {
                progressBarMessageElement.innerHTML = progress.description;
                task_start_service_state = "PROGRESS"
            } else {
                progressBarMessageElement.innerHTML = loader_circle
            }

        }

        function StartServiceSuccess(progressBarElement, progressBarMessageElement) {
            task_start_service_state = 'SUCCESS';
            download_resultBtn.style.display = "block"
            stop_button.innerHTML = "{{ _('Clear data') }}"
            progressBarElement.style.backgroundColor = '#22e806';
            progressBarMessageElement.innerHTML = "<b>{{ _('Success') }}</b>";
        }

        function StartServiceError(progressBarElement, progressBarMessageElement) {
            task_start_service_state = 'ERROR';
            stop_button.innerHTML = "{{ _('Clear data') }}"
            progressBarElement.style.backgroundColor = '#ff0000';
            progressBarMessageElement.innerHTML =  "<b>{{ _('Failed') }}</b>";
            {#clickStopBtn();#}
        }

        function StartServiceResult(resultElement, result) {
          if (result) {
            if (task_start_service_state === 'SUCCESS') {
              start_service_result_elem.innerHTML += result.message;
              if (result.service_and_requests_errors > 0) {
                download_service_and_requests_errorsBtn.style.display = "block"
              } else {
                {#delete document.getElementById("start_service_download_service_and_requests_errors_file_form")#}
              }
              if (result.incorrect_data_or_duplicates > 0) {
                download_incorrect_data_or_duplicatesBtn.style.display = "block"
              } else {
                {#delete document.getElementById("start_service_download_incorrect_data_or_duplicates_file_button")#}
              }
            }
          }
        }

        document.addEventListener("DOMContentLoaded", function () {
          CeleryProgressBar.initProgressBar("{{ url('celery_progress:task_status', task_start_service.task_id) }}", {
            progressBarId: 'progress-bar-start-service',  progressBarMessageId: 'progress-bar-start-service-message',
            onProgress: StartServiceProgress, onResult: StartServiceResult, onSuccess: StartServiceSuccess, onError: StartServiceError});
        });

        function clickDownloadResultBtn() {
        const start_service_download_result_fileForm = document.getElementById("start_service_download_result_file_form");
        start_service_download_result_fileForm.addEventListener("submit", function(event) {
            event.preventDefault();
            var xhr = new XMLHttpRequest();
            xhr.open("POST", "{{ request.path }}");
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.onreadystatechange = function () {
              if (xhr.readyState === 4 && xhr.status === 200) {
                // handle response
              }
            };
            xhr.send(new FormData(start_service_download_result_fileForm));
          });
        start_service_download_result_fileForm.submit()
      }
    </script>
  {% else %}
    <script>
      clickStopBtn()
    </script>
  {% endif %}
</div>
