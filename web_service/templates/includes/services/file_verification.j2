{% if task and not task.status in ['SUCCESS', 'FAILURE', 'ERROR'] %}
  <div class='progress-wrapper'>
  <div id='progress-bar' class='progress-bar' style="background-color: #68a9ef; width: 0%;">&nbsp;</div>
  </div>
  <div id="progress-bar-message">{{ _('Start progress') }}</div>
  <script src="{{ static("celery_progress/celery_progress.js") }}"></script>

  <div id="celery-result"></div>

  <script>
  // vanilla JS version
  function customPogress(progressBarElement, progressBarMessageElement, progress) {
    progressBarElement.innerHTML = '&nbsp;';
    progressBarElement.style.maxWidth = '500px';
    progressBarElement.style.width = progress.percent + '%';
    progressBarElement.style.backgroundColor = '#003dff';
    if (progress.description) {
        progressBarMessageElement.innerHTML = progress.description;
      } else {
        progressBarMessageElement.innerHTML = '{{ _('Loading data') }}    ' +
                                              '<div class="loader" >' +
                                              '<div class="bar1"></div>' +
                                              '<div class="bar2"></div>' +
                                              '<div class="bar3"></div>' +
                                              '<div class="bar4"></div>' +
                                              '<div class="bar5"></div>' +
                                              '<div class="bar6"></div>' +
                                              '<div class="bar7"></div>' +
                                              '<div class="bar8"></div>' +
                                              '<div class="bar9"></div>' +
                                              '<div class="bar10"></div>' +
                                              '<div class="bar11"></div>' +
                                              '<div class="bar12"></div>' +
                                              '</div>';
      }
  }

  function customSuccess(progressBarElement, progressBarMessageElement) {
      {#progressBarElement.innerHTML = ( "{{ _('Success') }}" )#}
      progressBarElement.style.backgroundColor = '#22e806';
      progressBarMessageElement.innerHTML = ( "{{ _('Success') }}" )
  }
  function customError(progressBarElement, progressBarMessageElement) {
      {#progressBarElement.innerHTML = ( "{{ _('Failure') }}" )#}
      progressBarElement.style.backgroundColor = '#ff0000';
      progressBarMessageElement.innerHTML = ( "{{ _('Failure') }}" )
  }
  function customResult(resultElement, result) {
    {#resultElement.innerHTML += "<p>{{ _('Result') }}:" + result + "</p>";#}
    resultElement.innerHTML += result
  }


  document.addEventListener("DOMContentLoaded", function () {
    var progressUrl = "{{ url('celery_progress:task_status', task.task_id) }}";
    CeleryProgressBar.initProgressBar(progressUrl, {
      onProgress: customPogress, onResult: customResult, onSuccess: customSuccess, onError: customError});
  });
  </script>

  <script>
    let fields = document.querySelectorAll('.field__file');
    Array.prototype.forEach.call(fields, function (input) {
      let label = input.nextElementSibling,
        labelVal = label.querySelector('.field__file-fake').innerText;

      input.addEventListener('change', function (e) {
        let countFiles = '';
        if (this.files && this.files.length >= 1)
          countFiles = this.files.length;

        if (countFiles)
          label.querySelector('.field__file-fake').innerText = 'Выбрано файлов: ' + countFiles;
        else
          label.querySelector('.field__file-fake').innerText = labelVal;
      });
    });
</script>

{% else %}
{#  <div class="field__wrapper">#}
{#    <input name="datafile" type="file" id="datafile" class="field field__file" onchange="displayFileName()">#}
{#    <label class="field__file-wrapper" for="datafile">#}
{#      <div class="field__file-fake" id="fileName">Файл не выбран</div>#}
{#      <div class="field__file-button">Выбрать</div>#}
{#    </label>#}
{#   </div>#}

  <form class="form-input__wrapper" method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <input class="form-input__file" id="datafile" name="datafile" type="file" title="{{ _('Select a file with initial data') }}" accept=".xls, .xlsx" onchange="displayFileName()"/>
    <label for="datafile" class="form-input form-input__file-button">
      <span class="form-input__file-button-text" id="fileName">Выберите файл</span>
    </label>
    <button class="btn btn_success" type="submit">{{ _('Download') }}</button>
  </form>

  <script>
    function displayFileName() {
      const input = document.getElementById('datafile');
      const fileName = input.files[0].name;
      document.getElementById('fileName').textContent = fileName;
    }
  </script>
{% endif %}
