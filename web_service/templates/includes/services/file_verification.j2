{% if task and not task.status in ['SUCCESS', 'FAILURE', 'ERROR', 'REVOKED'] %}

  <div class='progress-wrapper'>
  <div id='progress-bar' class='progress-bar' style="background-color: #68a9ef; width: 0%;">&nbsp;</div>
  </div>
  <div id="progress-bar-message">{{ _('Start progress') }}</div>
  <script src="{{ static("celery_progress/celery_progress.js") }}"></script>

  <div id="celery-result"></div>

  <p>
    <button class="btn btn_success" id="reset_btn">{{ _('Cancel verification') }}</button>
    <button class="btn btn_success" id="apply_btn" style="display: none">{{ _('Confirm result') }}</button>
  </p>



  <form class="form-input__wrapper" method="post" id="command_form">
    {% csrf_token %}
    <input type="text" value="STOP_TASK:{{ task.task_id }}" id="command" name="command" hidden="hidden">
  </form>

  <script>
    // vanilla JS version
    var task_state = "{{ task.state }}"
    var select_next_file = "{{ _('Select a different file') }}"
    var resetBtn = document.getElementById("reset_btn");
    var applyBtn = document.getElementById("apply_btn");

    function customPogress(progressBarElement, progressBarMessageElement, progress) {
      progressBarElement.innerHTML = '&nbsp;';
      progressBarElement.style.maxWidth = '500px';
      progressBarElement.style.width = progress.percent + '%';
      progressBarElement.style.backgroundColor = '#003dff';
      if (progress.description) {
          progressBarMessageElement.innerHTML = progress.description;
          task_state = "PROGRESS"
      } else {
          progressBarMessageElement.innerHTML = '{{ _('Loading data') }}    ' +
                                                '<div class="loader" >' +
                                                '<div class="bar1"></div>' +
                                                '<div class="bar2"></div>' +
                                                '<div class="bar3"></div>' +
                                                '<div class="bar4"></div>' +
                                                '<div class="bar5"></div>' +
                                                '<div class="bar6"></div>' +
                                                '<div class="bar7"></div>' +
                                                '<div class="bar8"></div>' +
                                                '<div class="bar9"></div>' +
                                                '<div class="bar10"></div>' +
                                                '<div class="bar11"></div>' +
                                                '<div class="bar12"></div>' +
                                                '</div>';
        }
    }

    function customSuccess(progressBarElement, progressBarMessageElement) {
        task_state = 'SUCCESS';
        resetBtn.innerHTML = select_next_file;
        applyBtn.style.display = "block"
        progressBarElement.style.backgroundColor = '#22e806';
        progressBarMessageElement.innerHTML = "{{ _('Success') }}";
    }
    function customError(progressBarElement, progressBarMessageElement) {
        task_state = 'ERROR';
        resetBtn.innerHTML = select_next_file;
        progressBarElement.style.backgroundColor = '#ff0000';
        progressBarMessageElement.innerHTML =  "{{ _('Failure') }}";
    }
    function customResult(resultElement, result) {
      resultElement.innerHTML += result;
    }


    document.addEventListener("DOMContentLoaded", function () {
      var progressUrl = "{{ url('celery_progress:task_status', task.task_id) }}";
      CeleryProgressBar.initProgressBar(progressUrl, {
        onProgress: customPogress, onResult: customResult, onSuccess: customSuccess, onError: customError});
    });


    document.getElementById("reset_btn").onclick = function () {
      if (task_state === 'SUCCESS' || task_state === 'ERROR')
        location.href = "{{ request.path }}"
      else  {
        var commandForm = document.getElementById("command_form");
        commandForm.addEventListener("submit", function(event) {
          event.preventDefault();
          var xhr = new XMLHttpRequest();
          xhr.open("POST", "{{ request.path }}");
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
              // handle response
            }
          };
          xhr.send(new FormData(commandForm));
        });
        commandForm.submit();
      }
    };
  </script>

{% else %}

  <form class="form-input__wrapper" method="post" enctype="multipart/form-data">
    {% csrf_token %}
    <input class="form-input__file" id="datafile" name="datafile" type="file" title="{{ _('Select a file with initial data') }}" accept=".xls, .xlsx" onchange="displayFileName()"/>
    <label for="datafile" class="form-input form-input__file-button">
      <span class="form-input__file-button-text" id="fileName">{{ _('Select File') }}</span>
    </label>
    <button class="btn btn_success" type="submit">{{ _('Download') }}</button>
  </form>

  <script>
    function displayFileName() {
      const input = document.getElementById('datafile');
      const fileName = input.files[0].name;
      document.getElementById('fileName').textContent = fileName;
    }
  </script>
{% endif %}
